/**
 * models/TempUser.js   (fully-ready replacement ✅)
 * ------------------------------------------------------------
 * TempUser  – “draft” creator profiles generated by the AI.
 *
 *  Key improvements in this version
 *  --------------------------------
 *  1.  **phone** field added + sanitiser:
 *      • Strips whitespace / “N/A” / empty strings.
 *      • If the value is not a plausible E.164 / local number it is
 *        removed entirely so it won’t trip the unique index later.
 *  2.  Unique index on **phone** is now **partial + sparse**:
 *      duplicates are rejected only when a *real* phone value exists.
 *  3.  userNameCanonical & other logic unchanged.
 * ------------------------------------------------------------
 */

const mongoose = require('mongoose');
const { Schema } = mongoose;

/* ───────── helper to build canonical key ─────────────────────── */
const canon = (s = '') =>
  s.normalize('NFKD')               // é → e
   .replace(/\s+/g, '')             // remove spaces
   .replace(/[^a-z0-9_]/gi, '')     // keep a-z 0-9 _
   .toLowerCase();

/* ───────── helper to clean phone numbers ─────────────────────── */
const cleanPhone = (raw = '') => {
  const p = String(raw).trim();
  if (!p || p.toLowerCase() === 'n/a') return undefined;
  // naïve accept: 6–15 digits, optional “+” at start
  return /^\+?\d{6,15}$/.test(p) ? p : undefined;
};

/* ───────── schema definition ─────────────────────────────────── */
const TempUserSchema = new Schema(
  {
    /* base identity -------------------------------------------- */
    name              : String,

    userName          : { type:String, required:true, trim:true },
    userNameCanonical : { type:String, required:true, trim:true },

    bio               : String,
    avatarUrl         : String,
    phone             : { type:String, trim:true },      // NEW

    /* meta ----------------------------------------------------- */
    userType : {
      type   : String,
      enum   : ['Creator', 'Marketer'],
      default: 'Creator'
    },

    /* creator specific data ------------------------------------ */
    creatorData : {
      totalFollowers : { type:Number, default:0 },
      categories     : [String],
      platforms      : [{
        platform       : String,
        followersCount : Number,
        handle         : String         // supports handle in platforms
      }]
    },

    /* marketer specific data ----------------------------------- */
    marketerData : { categories:[String] },

    /* search provenance --------------------------------------- */
    searchQuery  : String,
    searchTags   : [String],

    aiGenerated  : { type:Boolean, default:true },
    generatedAt  : { type:Date,    default:Date.now },

    /* auto-expire after 30 days -------------------------------- */
    expiresAt : {
      type   : Date,
      default: () =>
        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)   // 30 days
    },

    status : {
      type   : String,
      enum   : ['active', 'pending_offer', 'converted', 'expired'],
      default: 'active'
    }
  },
  {
    versionKey : false,
    /* default collation: case-insensitive comparisons */
    collation  : { locale:'en', strength:2 }
  }
);

/* ───────── pre-validate hook – canonical + phone clean ───────── */
TempUserSchema.pre('validate', function (next) {
  if (this.userName && !this.userNameCanonical) {
    this.userNameCanonical = canon(this.userName);
  }
  /* sanitize phone */
  this.phone = cleanPhone(this.phone);
  next();
});

/* ───────── indexes ───────────────────────────────────────────── */

/* 1) unique canonical handle (case-insensitive) ---------------- */
TempUserSchema.index(
  { userNameCanonical: 1 },
  {
    name  : 'userName_ci_unique',
    unique: true,
    collation: { locale:'en', strength:2 },
    partialFilterExpression: { userNameCanonical: { $type:'string' } }
  }
);

/* 2) simple index on original userName ------------------------- */
TempUserSchema.index({ userName: 1 }, { name:'userName_1' });

/* 3) unique phone – **only when phone exists & non-empty** ----- */
TempUserSchema.index(
  { phone: 1 },
  {
    name  : 'phone_1',
    unique: true,    
    partialFilterExpression: { phone: { $gt: '' } }   // ✅ > ''  skips empties
  }
);

/* 4) frequently filtered fields -------------------------------- */
TempUserSchema.index({ searchTags               : 1 });
TempUserSchema.index({ 'creatorData.categories' : 1 });
TempUserSchema.index({ status                   : 1 });
TempUserSchema.index({ status:1, expiresAt:1 });

/* 5) TTL – MongoDB deletes the doc when expiresAt < now -------- */
TempUserSchema.index(
  { expiresAt: 1 },
  { name:'expiresAt_ttl', expireAfterSeconds: 0 }
);

/* 6) full-text search ----------------------------------------- */
TempUserSchema.index(
  {
    name                     : 'text',
    userName                 : 'text',
    'creatorData.categories' : 'text'
  },
  { name:'text_search_idx' }
);

/* ───────── model export ─────────────────────────────────────── */
module.exports = mongoose.model('TempUser', TempUserSchema);
