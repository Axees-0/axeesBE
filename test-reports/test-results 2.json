{
  "runInfo": {
    "startTime": "2025-06-15T15:36:39.158Z",
    "endTime": "2025-06-15T15:37:34.794Z",
    "duration": 55636,
    "environment": {
      "node": "v23.7.0",
      "platform": "darwin",
      "arch": "x64",
      "memory": 17179869184,
      "cpus": 16
    },
    "config": {
      "testDir": "./tests/integration",
      "outputDir": "./test-reports",
      "maxConcurrency": 16,
      "timeout": 300000,
      "retries": 0,
      "verbose": false,
      "generateReport": true
    }
  },
  "summary": {
    "total": 0,
    "passed": 0,
    "failed": 0,
    "skipped": 0,
    "duration": 68705
  },
  "categories": [
    {
      "category": "core",
      "startTime": "2025-06-15T15:36:39.162Z",
      "endTime": "2025-06-15T15:37:34.794Z",
      "files": [
        {
          "file": "user-management.test.js",
          "category": "core",
          "status": "failed",
          "duration": 13076,
          "stdout": "\n> axeesBE@1.0.0 test\n> jest tests/integration/user-management.test.js --testTimeout=60000\n\n  console.error\n    Error during deletePortfolioItem: TypeError: portfolioItem.remove is not a function\n        at remove (/Users/Mike/Desktop/programming/2_proposals/upwork/communication/axeeio_021932170180429028184/AWS/axees-eb-extracted/axees-sourcebundle/controllers/accountController.js:1772:19)\n        at Generator.next (<anonymous>)\n        at asyncGeneratorStep (/Users/Mike/Desktop/programming/2_proposals/upwork/communication/axeeio_021932170180429028184/AWS/axees-eb-extracted/axees-sourcebundle/node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n        at asyncGeneratorStep (/Users/Mike/Desktop/programming/2_proposals/upwork/communication/axeeio_021932170180429028184/AWS/axees-eb-extracted/axees-sourcebundle/node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n        at processTicksAndRejections (node:internal/process/task_queues:105:5)\n\n      111 |     }\n      112 |     \n    > 113 |     originalConsole.error.apply(console, args);\n          |                           ^\n      114 |   }\n      115 | };\n      116 |\n\n      at Object.apply (tests/setup.js:113:27)\n      at error (controllers/accountController.js:53:11)\n      at handleServerError (controllers/accountController.js:1780:5)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\n",
          "stderr": "(node:18208) [MONGOOSE] Warning: Duplicate schema index on {\"dealNumber\":1} found. This is often due to declaring an index using both \"index: true\" and \"schema.index()\". Please remove the duplicate index definition.\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:18208) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\n(node:18208) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\nFAIL tests/integration/user-management.test.js (11.23 s)\n  User Management API Tests\n    GET /api/account/profile/:userId\n      ✓ should return user profile with correct structure (616 ms)\n      ✓ should return creator data structure for Creator users (232 ms)\n      ✓ should return 404 for non-existent user (192 ms)\n      ✓ should return 400 for invalid user ID format (157 ms)\n    PUT /api/account/profile/:userId\n      ✓ should update basic profile fields (210 ms)\n      ✓ should reject duplicate phone number (192 ms)\n      ✕ should allow updating phone to the same phone (no change) (182 ms)\n      ✓ should return 404 for non-existent user (150 ms)\n    PATCH /api/account/creator/:userId\n      ✓ should update creator data successfully (185 ms)\n      ✓ should initialize creatorData if it does not exist (190 ms)\n      ✓ should reject creator data update for Marketer users (168 ms)\n    PATCH /api/account/marketer/:userId\n      ✓ should update marketer data successfully (194 ms)\n      ✓ should initialize marketerData if it does not exist (191 ms)\n    POST /api/account/creator/:userId/social-handles\n      ✓ should add social handle to creator successfully (162 ms)\n      ✓ should require platform and handle (139 ms)\n      ✓ should work for both Creator and Marketer users (171 ms)\n    PATCH /api/account/creator/:userId/social-handles/:handleId\n      ✓ should update social handle successfully (184 ms)\n      ✓ should return 404 for non-existent handle (190 ms)\n    DELETE /api/account/creator/:userId/social-handles/:handleId\n      ✓ should delete social handle successfully (229 ms)\n      ✓ should return 404 for non-existent handle (179 ms)\n    POST /api/account/creator/:userId/portfolio\n      ✓ should add portfolio item successfully (170 ms)\n      ✓ should reject portfolio addition for Marketer users (172 ms)\n    PATCH /api/account/creator/:userId/portfolio/:itemId\n      ✓ should update portfolio item successfully (210 ms)\n      ✓ should return 404 for non-existent portfolio item (189 ms)\n    DELETE /api/account/creator/:userId/portfolio/:itemId\n      ✓ should delete portfolio item successfully (249 ms)\n      ✓ should return 404 for non-existent portfolio item (202 ms)\n    PATCH /api/account/settings/:userId\n      ✓ should update user settings successfully (196 ms)\n      ✓ should update partial settings (177 ms)\n    POST /api/account/change-password/:userId\n      ✓ should change password successfully with correct current password (288 ms)\n      ✓ should reject password change with incorrect current password (237 ms)\n      ✓ should require both current and new password (159 ms)\n    DELETE /api/account/:userId\n      ✓ should soft delete user account (195 ms)\n      ✓ should soft delete without reason (167 ms)\n      ✓ should return 404 for non-existent user (154 ms)\n    PUT /api/account/device-token/:userId\n      ✓ should update device token successfully (190 ms)\n      ✓ should require deviceToken in request body (162 ms)\n      ✓ should return 404 for non-existent user (173 ms)\n\n  ● User Management API Tests › PUT /api/account/profile/:userId › should allow updating phone to the same phone (no change)\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 404\n\n      197 |         .send({ phone: '+12125551234', name: 'Same Phone Update' });\n      198 |\n    > 199 |       expect(response.status).toBe(200);\n          |                               ^\n      200 |       expect(response.body.user.name).toBe('Same Phone Update');\n      201 |     });\n      202 |\n\n      at Object.toBe (tests/integration/user-management.test.js:199:31)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 36 passed, 37 total\nSnapshots:   0 total\nTime:        11.311 s\nRan all test suites matching /tests\\/integration\\/user-management.test.js/i.\n",
          "exitCode": 1,
          "tests": {
            "total": 0,
            "passed": 0,
            "failed": 0,
            "skipped": 0
          }
        },
        {
          "file": "database-integration.test.js",
          "category": "core",
          "status": "failed",
          "duration": 55629,
          "stdout": "\n> axeesBE@1.0.0 test\n> jest tests/integration/database-integration.test.js --testTimeout=60000\n\n",
          "stderr": "(node:18203) [MONGOOSE] Warning: Duplicate schema index on {\"dealNumber\":1} found. This is often due to declaring an index using both \"index: true\" and \"schema.index()\". Please remove the duplicate index definition.\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:18203) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\n(node:18203) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\nFAIL tests/integration/database-integration.test.js (53.777 s)\n  Database Integration Tests\n    Data Consistency\n      User Data Integrity\n        ✓ should maintain referential integrity in user relationships (592 ms)\n        ✕ should handle cascading updates correctly (269 ms)\n        ✓ should prevent orphaned documents (223 ms)\n      Transaction Integrity\n        ✓ should handle concurrent offer creation correctly (199 ms)\n        ✓ should handle concurrent user updates correctly (201 ms)\n        ✓ should maintain atomicity in complex operations (235 ms)\n      Index Performance and Uniqueness\n        ✓ should enforce unique constraints correctly (241 ms)\n        ✓ should enforce username uniqueness (232 ms)\n        ✓ should handle case-insensitive uniqueness correctly (249 ms)\n    Query Performance\n      ✕ should perform user search queries efficiently (31988 ms)\n      ✕ should perform offer listing queries efficiently (2049 ms)\n      ✕ should handle pagination efficiently (1787 ms)\n      ✕ should perform complex filtering queries efficiently (1806 ms)\n    Data Validation\n      Schema Validation\n        ✓ should validate required fields correctly (136 ms)\n        ✓ should validate field types correctly (195 ms)\n        ✓ should validate enum values correctly (213 ms)\n        ✓ should validate array fields correctly (201 ms)\n        ✓ should validate nested object schemas correctly (202 ms)\n      Custom Validation Rules\n        ✕ should validate phone number format (208 ms)\n        ✕ should validate email format (224 ms)\n        ✕ should validate date ranges correctly (159 ms)\n        ✕ should validate amount ranges correctly (148 ms)\n    Database Connection Handling\n      ✓ should handle connection timeouts gracefully (353 ms)\n      ✓ should handle concurrent database operations (331 ms)\n    Memory Usage and Cleanup\n      ✓ should properly clean up after bulk operations (7098 ms)\n      ✓ should handle large document queries efficiently (366 ms)\n\n  ● Database Integration Tests › Data Consistency › User Data Integrity › should handle cascading updates correctly\n\n    TypeError: Cannot read properties of null (reading 'name')\n\n      167 |         // Verify updated name is reflected in populated documents\n      168 |         const populatedOffer = await Offer.findById(offer._id).populate('marketerId');\n    > 169 |         expect(populatedOffer.marketerId.name).toBe(newName);\n          |                                          ^\n      170 |       });\n      171 |\n      172 |       it('should prevent orphaned documents', async () => {\n\n      at Object.name (tests/integration/database-integration.test.js:169:42)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\n  ● Database Integration Tests › Query Performance › should perform user search queries efficiently\n\n    CastError: Cast to ObjectId failed for value \"search\" (type string) at path \"_id\" for model \"TempUser\"\n\n      at SchemaObjectId.Object.<anonymous>.SchemaObjectId.cast (node_modules/mongoose/lib/schema/objectId.js:251:11)\n      at SchemaObjectId.Object.<anonymous>.SchemaType.applySetters (node_modules/mongoose/lib/schemaType.js:1255:12)\n      at SchemaObjectId.Object.<anonymous>.SchemaType.castForQuery (node_modules/mongoose/lib/schemaType.js:1673:17)\n      at cast (node_modules/mongoose/lib/cast.js:390:32)\n      at model.Query.Object.<anonymous>.Query.cast (node_modules/mongoose/lib/query.js:5055:12)\n      at model.Query.Object.<anonymous>.Query._castConditions (node_modules/mongoose/lib/query.js:2351:10)\n      at model.Query._findOne (node_modules/mongoose/lib/query.js:2674:8)\n      at model.Query.exec (node_modules/mongoose/lib/query.js:4604:80)\n\n  ● Database Integration Tests › Query Performance › should perform user search queries efficiently\n\n    thrown: \"Exceeded timeout of 30000 ms for a test.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n      459 |     });\n      460 |\n    > 461 |     it('should perform user search queries efficiently', async () => {\n          |     ^\n      462 |       const startTime = Date.now();\n      463 |       \n      464 |       const response = await request(app)\n\n      at it (tests/integration/database-integration.test.js:461:5)\n      at describe (tests/integration/database-integration.test.js:396:3)\n      at Object.describe (tests/integration/database-integration.test.js:44:1)\n\n  ● Database Integration Tests › Query Performance › should perform offer listing queries efficiently\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 400\n\n      487 |       const queryTime = endTime - startTime;\n      488 |\n    > 489 |       expect(response.status).toBe(200);\n          |                               ^\n      490 |       expect(queryTime).toBeLessThan(1000); // Should complete within 1 second\n      491 |       expect(response.body).toHaveProperty('offers');\n      492 |     });\n\n      at Object.toBe (tests/integration/database-integration.test.js:489:31)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\n  ● Database Integration Tests › Query Performance › should handle pagination efficiently\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 400\n\n      508 |       const queryTime = endTime - startTime;\n      509 |\n    > 510 |       expect(response.status).toBe(200);\n          |                               ^\n      511 |       expect(queryTime).toBeLessThan(1000); // Should complete within 1 second\n      512 |       \n      513 |       if (response.body.offers) {\n\n      at Object.toBe (tests/integration/database-integration.test.js:510:31)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\n  ● Database Integration Tests › Query Performance › should perform complex filtering queries efficiently\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 400\n\n      533 |       const queryTime = endTime - startTime;\n      534 |\n    > 535 |       expect(response.status).toBe(200);\n          |                               ^\n      536 |       expect(queryTime).toBeLessThan(1500); // Complex queries can take a bit longer\n      537 |     });\n      538 |   });\n\n      at Object.toBe (tests/integration/database-integration.test.js:535:31)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\n  ● Database Integration Tests › Data Validation › Custom Validation Rules › should validate phone number format\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: {\"__v\": 0, \"_id\": \"684ee8b53abcc82b1732de85\", \"createdAt\": 2025-06-15T15:37:25.234Z, \"creatorData\": {\"_id\": \"684ee8b53abcc82b1732de86\", \"achievements\": \"\", \"businessVentures\": \"\", \"categories\": [\"technology\"], \"combinedViews\": 0, \"deals\": 0, \"listedEvents\": 0, \"nicheTopics\": [\"tech\"], \"offers\": 0, \"platforms\": [{\"_id\": \"684ee8b53abcc82b1732de87\", \"followersCount\": 1000, \"handle\": \"@testuser\", \"platform\": \"instagram\"}], \"portfolio\": [], \"profileViews\": 0, \"totalFollowers\": 1000}, \"email\": \"test@example.com\", \"emailVerified\": false, \"favorites\": [], \"isActive\": true, \"name\": \"Test User\", \"password\": \"$2b$10$06AFnGEN1io4zaZPJtuuiel4a7XLQvVcnzqxCXL0ltZW0itSiQ.bu\", \"paymentMethods\": [], \"settings\": {\"_id\": \"684ee8b53abcc82b1732de88\", \"notifications\": {\"email\": true, \"push\": true, \"sms\": true}, \"privacy\": {\"showEmail\": false, \"showPhone\": false}}, \"status\": \"active\", \"stripeConnectId\": null, \"stripeCustomerId\": null, \"tags\": [], \"updatedAt\": 2025-06-15T15:37:25.238Z, \"userName\": \"testuser123\", \"userType\": \"Creator\"}\n\n      666 |           };\n      667 |\n    > 668 |           await expect(User.create(invalidUser)).rejects.toThrow();\n          |                 ^\n      669 |         }\n      670 |       });\n      671 |\n\n      at expect (node_modules/expect/build/index.js:113:15)\n      at Object.expect (tests/integration/database-integration.test.js:668:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\n  ● Database Integration Tests › Data Validation › Custom Validation Rules › should validate email format\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: {\"__v\": 0, \"_id\": \"684ee8b53abcc82b1732dea1\", \"createdAt\": 2025-06-15T15:37:25.447Z, \"creatorData\": {\"_id\": \"684ee8b53abcc82b1732dea2\", \"achievements\": \"\", \"businessVentures\": \"\", \"categories\": [\"technology\"], \"combinedViews\": 0, \"deals\": 0, \"listedEvents\": 0, \"nicheTopics\": [\"tech\"], \"offers\": 0, \"platforms\": [{\"_id\": \"684ee8b53abcc82b1732dea3\", \"followersCount\": 1000, \"handle\": \"@testuser\", \"platform\": \"instagram\"}], \"portfolio\": [], \"profileViews\": 0, \"totalFollowers\": 1000}, \"email\": \"not-an-email\", \"emailVerified\": false, \"favorites\": [], \"isActive\": true, \"name\": \"Test User\", \"password\": \"$2b$10$RV2pkTZNe1xI8pez3oPVYerd5qdpHw2ZPZwMN3593TSRikyQzRzXK\", \"paymentMethods\": [], \"phone\": \"+12125559996\", \"settings\": {\"_id\": \"684ee8b53abcc82b1732dea4\", \"notifications\": {\"email\": true, \"push\": true, \"sms\": true}, \"privacy\": {\"showEmail\": false, \"showPhone\": false}}, \"status\": \"active\", \"stripeConnectId\": null, \"stripeCustomerId\": null, \"tags\": [], \"updatedAt\": 2025-06-15T15:37:25.452Z, \"userName\": \"testuser456\", \"userType\": \"Creator\"}\n\n      697 |           };\n      698 |\n    > 699 |           await expect(User.create(invalidUser)).rejects.toThrow();\n          |                 ^\n      700 |         }\n      701 |       });\n      702 |\n\n      at expect (node_modules/expect/build/index.js:113:15)\n      at Object.expect (tests/integration/database-integration.test.js:699:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n\n  ● Database Integration Tests › Data Validation › Custom Validation Rules › should validate date ranges correctly\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: {\"__v\": 0, \"_id\": \"684ee8b53abcc82b1732debd\", \"attachments\": [], \"counters\": [], \"createdAt\": 2025-06-15T15:37:25.609Z, \"creatorId\": \"684ee8b53abcc82b1732deb7\", \"currency\": \"USD\", \"deliverables\": [\"Post\"], \"description\": \"Invalid date order\", \"desiredPostDate\": 2025-06-22T15:37:25.609Z, \"desiredReviewDate\": 2025-06-29T15:37:25.609Z, \"marketerId\": \"684ee8b53abcc82b1732deb3\", \"offerName\": \"Invalid Date Offer\", \"offerType\": \"standard\", \"platforms\": [\"Instagram\"], \"proposedAmount\": 1000, \"updatedAt\": 2025-06-15T15:37:25.612Z, \"viewedByCreator\": false, \"viewedByMarketer\": false}\n\n      717 |\n      718 |         // This should be caught by business logic validation\n    > 719 |         await expect(Offer.create(invalidOffer)).rejects.toThrow();\n          |               ^\n      720 |       });\n      721 |\n      722 |       it('should validate amount ranges correctly', async () => {\n\n      at expect (node_modules/expect/build/index.js:113:15)\n      at Object.expect (tests/integration/database-integration.test.js:719:15)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n      at _next (node_modules/@babel/runtime/helpers/asyncToGenerator.js:22:7)\n      at Object.<anonymous> (node_modules/@babel/runtime/helpers/asyncToGenerator.js:14:12)\n\n  ● Database Integration Tests › Data Validation › Custom Validation Rules › should validate amount ranges correctly\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: {\"__v\": 0, \"_id\": \"684ee8b53abcc82b1732ded6\", \"attachments\": [], \"counters\": [], \"createdAt\": 2025-06-15T15:37:25.759Z, \"creatorId\": \"684ee8b53abcc82b1732ded0\", \"currency\": \"USD\", \"deliverables\": [\"Post\"], \"description\": \"Negative amount test\", \"desiredPostDate\": 2025-06-29T15:37:25.758Z, \"desiredReviewDate\": 2025-06-22T15:37:25.758Z, \"marketerId\": \"684ee8b53abcc82b1732decc\", \"offerName\": \"Negative Amount Offer\", \"offerType\": \"standard\", \"platforms\": [\"Instagram\"], \"proposedAmount\": -1000, \"updatedAt\": 2025-06-15T15:37:25.761Z, \"viewedByCreator\": false, \"viewedByMarketer\": false}\n\n      735 |         };\n      736 |\n    > 737 |         await expect(Offer.create(invalidOffer)).rejects.toThrow();\n          |               ^\n      738 |       });\n      739 |     });\n      740 |   });\n\n      at expect (node_modules/expect/build/index.js:113:15)\n      at Object.expect (tests/integration/database-integration.test.js:737:15)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n      at _next (node_modules/@babel/runtime/helpers/asyncToGenerator.js:22:7)\n      at Object.<anonymous> (node_modules/@babel/runtime/helpers/asyncToGenerator.js:14:12)\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 17 passed, 26 total\nSnapshots:   0 total\nTime:        53.865 s, estimated 58 s\nRan all test suites matching /tests\\/integration\\/database-integration.test.js/i.\n\nJest has detected the following 1 open handle potentially keeping Jest from exiting:\n\n  ●  TCPSERVERWRAP\n\n      463 |       \n      464 |       const response = await request(app)\n    > 465 |         .get('/api/users/search')\n          |          ^\n      466 |         .query({ search: 'Test User', userType: 'Creator' })\n      467 |         .set('x-user-id', marketerUser._id.toString());\n      468 |\n\n      at Test.serverAddress (node_modules/supertest/lib/test.js:63:35)\n      at new Test (node_modules/supertest/lib/test.js:49:14)\n      at Object.obj.<computed> [as get] (node_modules/supertest/index.js:39:18)\n      at Object.get (tests/integration/database-integration.test.js:465:10)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:3:17)\n      at asyncGeneratorStep (node_modules/@babel/runtime/helpers/asyncToGenerator.js:17:9)\n      at _next (node_modules/@babel/runtime/helpers/asyncToGenerator.js:22:7)\n      at Object.<anonymous> (node_modules/@babel/runtime/helpers/asyncToGenerator.js:14:12)\n\n",
          "exitCode": 1,
          "tests": {
            "total": 0,
            "passed": 0,
            "failed": 0,
            "skipped": 0
          }
        }
      ],
      "summary": {
        "total": 0,
        "passed": 0,
        "failed": 0,
        "skipped": 0,
        "duration": 68705
      }
    }
  ],
  "details": {
    "core": {
      "files": [
        {
          "file": "user-management.test.js",
          "status": "failed",
          "duration": 13076,
          "tests": {
            "total": 0,
            "passed": 0,
            "failed": 0,
            "skipped": 0
          },
          "hasError": true,
          "errorMessage": null
        },
        {
          "file": "database-integration.test.js",
          "status": "failed",
          "duration": 55629,
          "tests": {
            "total": 0,
            "passed": 0,
            "failed": 0,
            "skipped": 0
          },
          "hasError": true,
          "errorMessage": null
        }
      ]
    }
  }
}