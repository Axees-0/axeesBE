import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Pressable,
  Platform,
  useWindowDimensions,
  ScrollView,
} from "react-native";
import { Image } from "expo-image";
import { SafeAreaView } from "react-native-safe-area-context";
import { StatusBar } from "expo-status-bar";
import { router, useLocalSearchParams } from "expo-router";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { useAuth } from "@/contexts/AuthContext";

// Import SVG components
import Arrowleft02 from "@/assets/arrowleft02.svg";
import Unlink04 from "@/assets/unlink04.svg";
import Qrcode from "@/assets/qr-code.svg";
import Link01 from "@/assets/linksquare01.svg";
import MakeOfferModal from "@/components/account/ProfileMakeOfferModal";

const BREAKPOINTS = {
  TABLET: 768,
  DESKTOP: 1280,
};

const API_URL = process.env.EXPO_PUBLIC_BACKEND_URL + "/api/account";

// MrBeast mock data as fallback
const MRBEAST_MOCK_PROFILE = {
  name: "Jimmy Donaldson",
  username: "@MrBeast",
  category: "Content Creator",
  bio: "American YouTuber, internet personality, and entrepreneur. Known for high-production videos, challenges, and philanthropy. Founder of MrBeast Burger, Feastables, and co-founder of Team Trees and Team Seas.",
  categories: ["Entertainment", "Philanthropy", "Food", "Gaming"],
  stats: {
    totalFollowers: "1.1B+",
    listedEvents: "500+",
    combinedViews: "20B+",
    offers: "1.2K",
    deals: "450",
    socialPlatforms: {
      youtube: "328M",
      instagram: "60M",
      tiktok: "104M",
      facebook: "20M",
    },
  },
  achievements: [
    "Most subscribed individual YouTuber",
    "3rd most-followed creator on TikTok",
    "4-time Creator of the Year (Streamy Awards)",
    "3-time Favorite Male Creator (Nickelodeon Kids' Choice Awards)",
    "Named in Time's 100 Most Influential People (2023)",
  ],
  businessVentures: [
    "MrBeast Burger",
    "Feastables",
    "Beast Philanthropy",
    "Team Trees ($24M+ raised)",
    "Team Seas ($30M+ raised)",
  ],
};

export default function PublicProfile() {
  const window = useWindowDimensions();
  const isWeb = Platform.OS === "web";
  const isWideScreen = window.width >= BREAKPOINTS.TABLET;
  const [isOfferModalVisible, setIsOfferModalVisible] = useState(false);
  const { user } = useAuth();
  const { id: userId } = useLocalSearchParams();

  // Fetch profile data from backend if user is logged in and userId is provided
  const { data: profile, isLoading } = useQuery({
    queryKey: ["publicProfile", userId],
    queryFn: async () => {
      if (!userId) return null;
      const response = await axios.get(`${API_URL}/profile/${userId}`);
      return response.data;
    },
    enabled: !!userId,
  });

  // Use MrBeast mock data if user is not logged in or no profile found
  const displayProfile =
    profile?.user?.status === "active" ? profile.user : MRBEAST_MOCK_PROFILE;

  // Transform backend data to match the display format
  const transformedProfile =
    profile?.user?.status === "active"
      ? {
          ...displayProfile,
          stats: {
            totalFollowers:
              displayProfile.creatorData?.totalFollowers?.toLocaleString() ||
              "0",
            listedEvents:
              displayProfile.creatorData?.listedEvents?.toLocaleString() || "0",
            combinedViews:
              displayProfile.creatorData?.profileViews?.toLocaleString() || "0",
            offers:
              displayProfile.creatorData?.offersCount?.toLocaleString() || "0",
            deals:
              displayProfile.creatorData?.dealsCompleted?.toLocaleString() ||
              "0",
            socialPlatforms:
              displayProfile.creatorData?.socialHandles?.reduce(
                (acc, handle) => ({
                  ...acc,
                  [handle.platform]: handle.followersCount?.toLocaleString(),
                }),
                {}
              ) || {},
          },
          categories: displayProfile.creatorData?.nicheTopics || [],
          achievements: displayProfile.creatorData?.achievements || [],
          businessVentures: displayProfile.creatorData?.businessVentures || [],
        }
      : MRBEAST_MOCK_PROFILE;

  return (
    <SafeAreaView style={[styles.container]}>
      <StatusBar style="dark" />
      <View style={styles.header}>
        <Pressable onPress={() => router.push("/")} style={styles.backButton}>
          <Arrowleft02 width={24} height={24} />
        </Pressable>
        <Text style={styles.headerTitle}>Creator Profile</Text>
        <View style={styles.placeholder} />
      </View>

      <ScrollView style={styles.content}>
        <View style={styles.coverImageContainer}>
          <Image
            source={profile?.user?.coverImage || require("@/assets/cover.png")}
            style={styles.coverImage}
            contentFit="cover"
          />
          <View style={styles.coverOverlay}>
            <View style={styles.coverOverlayRow}>
              <View style={styles.qrContainer}>
                <Qrcode width={24} height={24} />
              </View>
              <View style={styles.buythisContainer}>
                <Unlink04 width={20} height={20} />
                <Text style={styles.buythisText}>buythis</Text>
              </View>
            </View>
          </View>
        </View>

        <View
          style={[
            styles.mainContent,
            isWeb && isWideScreen && styles.webContainer,
          ]}
        >
          <View
            style={[
              styles.profileContainer,
              !isWideScreen && {
                width: "80%",
              },
              isWideScreen && {
                width: "85%",
              },
            ]}
          >
            <View style={styles.profileImageContainer}>
              <Image
                source={
                  profile?.user?.avatar || require("@/assets/rectangle-52.png")
                }
                style={styles.profileImage}
                contentFit="cover"
              />
            </View>

            <View
              style={[
                styles.profileInfo,
                isWideScreen && {
                  left: "15%",
                  width: "100%",
                },
                !isWideScreen && {
                  left: "45%",
                },
              ]}
            >
              <View style={styles.nameSection}>
                <Text style={styles.name}>{transformedProfile.name}</Text>
                <Text style={styles.username}>
                  {transformedProfile.username}
                </Text>
              </View>

              <View style={styles.categoryContainer}>
                <View style={styles.categoryBadge}>
                  <Text style={styles.categoryText}>
                    {transformedProfile.category}
                  </Text>
                </View>
                <View style={styles.categoryUnlink}>
                  <Unlink04 width={20} height={20} />
                </View>
              </View>
            </View>
          </View>

          <View style={styles.categoriesContainer}>
            {transformedProfile.categories.map((category, index) => (
              <View key={index} style={styles.categoryTag}>
                <Text style={styles.categoryTagText}>{category}</Text>
              </View>
            ))}
          </View>

          <View style={styles.socialIconsContainer}>
            {Object.entries(transformedProfile.stats.socialPlatforms).map(
              ([platform, count], index) => (
                <React.Fragment key={platform}>
                  <View
                    style={{
                      borderBottomWidth: index === 0 ? 1 : 0,
                      borderColor: "#430B92",
                      paddingBottom: 5,
                    }}
                  >
                    <Image
                      source={getSocialIcon(platform)}
                      style={{
                        width: 24,
                        height: 24,
                      }}
                      contentFit="contain"
                    />
                  </View>
                  {index <
                    Object.entries(transformedProfile.stats.socialPlatforms)
                      .length -
                      1 && <View style={styles.statDivider} />}
                </React.Fragment>
              )
            )}
          </View>

          <View style={styles.statsContainer}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Total Followers</Text>
              <Text style={styles.statValue}>
                {transformedProfile.stats.totalFollowers}
              </Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Listed Events</Text>
              <Text style={styles.statValue}>
                {transformedProfile.stats.listedEvents}
              </Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Combined Views</Text>
              <Text style={styles.statValue}>
                {transformedProfile.stats.combinedViews}
              </Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Offers</Text>
              <Text style={styles.statValue}>
                {transformedProfile.stats.offers}
              </Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Deals</Text>
              <Text style={styles.statValue}>
                {transformedProfile.stats.deals}
              </Text>
            </View>
          </View>

          <Text style={styles.bio}>{transformedProfile.bio}</Text>

          <View style={styles.actionButtons}>
            <Pressable style={styles.mediaPackageButton}>
              <Image
                source={require("@/assets/share-icon.png")}
                style={{ width: 24, height: 24 }}
                contentFit="contain"
              />
              <Text style={styles.mediaPackageText}>Media Package</Text>
            </Pressable>
            <Pressable
              style={styles.makeOfferButton}
              onPress={() => setIsOfferModalVisible(true)}
            >
              <Text style={styles.makeOfferText}>Make Offer</Text>
            </Pressable>
          </View>

          <View style={styles.socialStats}>
            <Text style={styles.sectionTitle}>Social Stats</Text>

            <View
              style={[
                styles.socialPlatforms,
                isWeb && isWideScreen && styles.webSocialPlatforms,
              ]}
            >
              {Object.entries(transformedProfile.stats.socialPlatforms).map(
                ([platform, count], index) => (
                  <View key={platform} style={[styles.platformStats]}>
                    <View style={styles.platformIconWrapper}>
                      <Image
                        source={getSocialIcon(platform)}
                        style={{ width: 30, height: 30 }}
                        contentFit="contain"
                      />
                      <View style={styles.platformCountWrapper}>
                        <Text style={styles.platformCount}>{count}</Text>
                      </View>
                    </View>

                    <Pressable style={styles.viewButton}>
                      <Text style={styles.viewButtonText}>View</Text>
                      <Link01 width={24} height={24} />
                    </Pressable>
                    {index !==
                      Object.entries(transformedProfile.stats.socialPlatforms)
                        .length -
                        1 &&
                      isWideScreen && <View style={styles.statDivider} />}
                  </View>
                )
              )}
            </View>
          </View>

          <View style={styles.achievements}>
            <Text style={styles.sectionTitle}>Achievements</Text>
            {transformedProfile.achievements.map((achievement, index) => (
              <Text key={index} style={styles.achievementText}>
                • {achievement}
              </Text>
            ))}
          </View>

          <View style={styles.businessVentures}>
            <Text style={styles.sectionTitle}>Business Ventures</Text>
            {transformedProfile.businessVentures.map((venture, index) => (
              <Text key={index} style={styles.ventureText}>
                • {venture}
              </Text>
            ))}
          </View>
        </View>
      </ScrollView>

      <MakeOfferModal
        visible={isOfferModalVisible}
        onClose={() => setIsOfferModalVisible(false)}
      />
    </SafeAreaView>
  );
}

// Helper function to get social media icons
const getSocialIcon = (platform) => {
  switch (platform) {
    case "instagram":
      return require("@/assets/pngclipartinstagramlogoiconotherstextphotographythumbnail-14.png");
    case "youtube":
      return require("@/assets/pngclipartyoutubeplaybuttoncomputericonsyoutubeyoutubelogoanglerectanglethumbnail-13.png");
    case "tiktok":
      return require("@/assets/tiktok-icon.png");
    case "facebook":
      return require("@/assets/facebook-icon.png");
    default:
      return require("@/assets/facebook-icon.png");
  }
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  errorContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    padding: 16,
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: "600",
  },
  placeholder: {
    width: 40,
  },
  content: {
    flex: 1,
  },
  coverImageContainer: {
    height: 150,
  },
  coverImage: {
    width: "100%",
    height: "100%",
  },
  profileSection: {
    flexDirection: "row",
    padding: 16,
    marginTop: -40,
  },
  profileImage: {
    width: 120,
    height: 120,
    borderRadius: 12,
  },
  profileInfo: {
    flex: 1,
    marginLeft: 16,
    justifyContent: "center",
  },
  name: {
    fontSize: 24,
    fontWeight: "500",
  },
  username: {
    fontSize: 16,
    opacity: 0.5,
  },
  badgeContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 8,
  },
  badgeText: {
    fontSize: 16,
    color: "#FF6B00",
    fontFamily: "ROGLyonsType",
  },
  linkBadge: {
    marginLeft: 8,
    padding: 4,
    backgroundColor: "rgba(0,0,0,0.05)",
    borderRadius: 20,
  },
  tagsContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    padding: 16,
    gap: 8,
  },
  tag: {
    backgroundColor: "rgba(0,0,0,0.05)",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  tagText: {
    fontSize: 14,
    color: "rgba(0,0,0,0.6)",
  },
  statsContainer: {
    padding: 16,
  },
  socialLinks: {
    flexDirection: "row",
    gap: 16,
    marginBottom: 16,
  },
  socialIcon: {
    width: 24,
    height: 24,
  },
  metrics: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  metricItem: {
    alignItems: "center",
  },
  metricLabel: {
    fontSize: 14,
    opacity: 0.5,
  },
  metricValue: {
    fontSize: 20,
    fontWeight: "600",
    marginTop: 4,
  },
  bio: {
    padding: 16,
    fontSize: 14,
    lineHeight: 20,
    opacity: 0.6,
  },
  actionButtons: {
    flexDirection: "row",
    padding: 16,
    gap: 16,
  },
  mediaPackageButton: {
    flex: 1,
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "rgba(0,0,0,0.1)",
    alignItems: "center",
  },
  makeOfferButton: {
    flex: 1,
    padding: 16,
    borderRadius: 8,
    backgroundColor: "rgba(0,0,0,0.1)",
    alignItems: "center",
  },
  buttonText: {
    fontSize: 16,
    fontWeight: "500",
  },
  socialStats: {
    padding: 16,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: "600",
    marginBottom: 16,
  },
  platformStats: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 16,
  },
  platformInfo: {
    flexDirection: "row",
    alignItems: "center",
    gap: 16,
  },
  platformIcon: {
    width: 32,
    height: 32,
  },
  platformMetric: {
    fontSize: 18,
    fontWeight: "500",
  },
  viewButton: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
  },
  viewButtonText: {
    fontSize: 16,
    color: "rgba(0,0,0,0.6)",
  },
  achievementsSection: {
    padding: 16,
  },
  achievementsText: {
    fontSize: 14,
    lineHeight: 20,
    opacity: 0.8,
  },
  businessSection: {
    padding: 16,
  },
  businessText: {
    fontSize: 14,
    lineHeight: 20,
    opacity: 0.8,
  },
  mainContent: {
    flex: 1,
  },
  webContainer: {
    maxWidth: 1200,
    alignSelf: "center",
    width: "100%",
  },
  profileContainer: {
    position: "relative",
    marginTop: -60,
    marginLeft: "auto",
    marginRight: "auto",
  },
  profileImageContainer: {
    position: "absolute",
    top: 0,
    left: 0,
  },
  nameSection: {
    marginBottom: 8,
  },
  categoryContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
  },
  categoryBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    backgroundColor: "#430B92",
    borderRadius: 16,
  },
  categoryText: {
    color: "#fff",
    fontSize: 14,
  },
  categoryUnlink: {
    padding: 4,
    backgroundColor: "rgba(0,0,0,0.05)",
    borderRadius: 20,
  },
  categoriesContainer: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 8,
    padding: 16,
    marginTop: 60,
  },
  categoryTag: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    backgroundColor: "rgba(0,0,0,0.05)",
    borderRadius: 6,
  },
  categoryTagText: {
    fontSize: 14,
    color: "rgba(0,0,0,0.6)",
  },
  socialIconsContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: 24,
    padding: 16,
  },
  statItem: {
    alignItems: "center",
  },
  statLabel: {
    fontSize: 14,
    color: "rgba(0,0,0,0.5)",
  },
  statValue: {
    fontSize: 20,
    fontWeight: "600",
    marginTop: 4,
  },
  statDivider: {
    width: 1,
    height: 40,
    backgroundColor: "rgba(0,0,0,0.1)",
  },
  mediaPackageText: {
    fontSize: 16,
    fontWeight: "500",
    marginTop: 8,
  },
  makeOfferText: {
    fontSize: 16,
    fontWeight: "500",
    color: "#430B92",
  },
  socialPlatforms: {
    gap: 16,
  },
  webSocialPlatforms: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  platformIconWrapper: {
    flexDirection: "row",
    alignItems: "center",
    gap: 16,
  },
  platformCountWrapper: {
    minWidth: 80,
  },
  platformCount: {
    fontSize: 18,
    fontWeight: "500",
  },
  achievements: {
    padding: 16,
  },
  achievementText: {
    fontSize: 14,
    lineHeight: 20,
    opacity: 0.8,
    marginBottom: 8,
  },
  businessVentures: {
    padding: 16,
  },
  ventureText: {
    fontSize: 14,
    lineHeight: 20,
    opacity: 0.8,
    marginBottom: 8,
  },
  coverOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    padding: 16,
  },
  coverOverlayRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  qrContainer: {
    width: 40,
    height: 40,
    backgroundColor: "rgba(255,255,255,0.9)",
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
  },
  buythisContainer: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
    backgroundColor: "rgba(255,255,255,0.9)",
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
  },
  buythisText: {
    fontSize: 14,
    fontWeight: "500",
  },
});
